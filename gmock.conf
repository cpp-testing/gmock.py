#possible variables:
# file: interface file name
# dir: interface directory
# guard: header guard
# template: template parameters
# template_interface: template interface class
# interface: interface class
# mock_methods: generated gmock methods
# generated_dir: generated directory
# mock_file_hpp: mock header file
# mock_file_cpp: mock source file

mock_file_hpp = "%(interface)s-gmock.h"

file_template_hpp = """\
/**
 * @file    %(mock_file_hpp)s
 * @brief   Definition of a mock class for %(interface)s interface.
 *
 * @copyright Copyright (c) 2023
 *
 */
#ifndef %(guard)s
#define %(guard)s

#include <gmock/gmock.h>
#include "%(dir)s/%(file)s"

%(namespaces_begin)s

%(template)sclass %(interface)s_Mock : public %(template_interface)s
{
public:
%(interface)s_Mock();
~%(interface)s_Mock() override;

%(mock_methods)s
};

%(namespaces_end)s

#endif /* %(guard)s */

"""

mock_file_cpp = "%(interface)s-gmock.cpp"

file_template_cpp = """\
/**
 * @file    %(mock_file_cpp)s
 * @brief   Implementation of a mock class for %(interface)s interface.
 *
 * @copyright Copyright (c) 2023
 *
 */

#include <gmock/gmock.h>
#include "%(mock_file_hpp)s"

%(namespaces_begin)s

%(interface)s_Mock::%(interface)s_Mock() = default;
%(interface)s_Mock::~%(interface)s_Mock() = default;

%(namespaces_end)s

"""
